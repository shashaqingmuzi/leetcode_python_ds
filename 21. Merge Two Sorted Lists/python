#首先构造一个新的链表，比较两个链表的指针指向的节点的值大小，
#将值较少的节点放到新链表中，并将指针位置往后移动一位，
#直到某个链表为空之后，把剩下的链表全部放到新的链表中就可以了。
#时间复杂度是（O（m+n））

#主要是关于链表的理解：
#tmp.next = ListNode(0)
#tmp = tmp.next
#上面可以理解为定义一个新的地址
# ListNode(0)里面随便填个数字就可以的
# return ans  就是返回头结点呀

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        ans = ListNode(0)
        tmp = ans
        if l1 == None and l2 == None:
            return None
        while l1 != None or l2 != None:
            if l1 == None:
                while l2 != None:
                    tmp.val = l2.val
                    l2 = l2.next
                    if l2 == None:
                        break
                    tmp.next = ListNode(0)
                    tmp = tmp.next
                break
            if l2 == None:
                while l1 != None:
                    tmp.val  = l1.val
                    l1 = l1.next
                    if l1 == None:
                        break
                    tmp.next = ListNode(0)
                    tmp = tmp.next
                break
            if l1.val <= l2.val:
                tmp.val = l1.val
                l1 = l1.next
            else:
                tmp.val = l2.val
                l2 = l2.next
            tmp.next = ListNode(0)
            tmp = tmp.next
        return ans
